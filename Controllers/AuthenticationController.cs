using System.Security.Claims;
using FirstAPI.interfaces;
using FirstAPI.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace FirstAPI.Controllers
{
    /* TO DO:
     *      - generate email confirmation code and create email confirmation Route
     *      - generate JWT for users
     *      - add Two-Factor Authentication
     */

    [Route("api/[controller]")]
    [ApiController]
    public class AuthenticationController : ControllerBase
    {
        private readonly UserManager<User> _userManager;
        private readonly ITokenService _tokenService;
        public AuthenticationController(UserManager<User> userManager, ITokenService tokenService)
        {
            _userManager = userManager;
            _tokenService = tokenService;
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterDTO registerData)
        {
            try
            {

                // ModelState is a property of the ControllerBase used to represent the state of DTO binding and validation during an HTTP request
                if (!ModelState.IsValid)
                    return BadRequest(ModelState);

                if (await _userManager.FindByNameAsync(registerData.UserName) != null)
                    return BadRequest("username already in use");

                if (await _userManager.FindByEmailAsync(registerData.Email) != null)
                    return BadRequest("email already in use");

                var user = new User
                {
                    FirstName = registerData.FirstName,
                    LastName = registerData.LastName,
                    Email = registerData.Email,
                    UserName = registerData.UserName
                };

                var result = await _userManager.CreateAsync(user, registerData.Password);

                if (result.Succeeded)
                {
                    //TO DO:
                    //  - Generate Email confirmation Code and Send it
                    return Ok("registered successfully");
                }

                // looping through errors generated by identity and appending them to the ModelState
                foreach (IdentityError error in result.Errors)
                    ModelState.AddModelError(string.Empty, error.Description);

                return BadRequest(ModelState);
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error: " + ex.Message);
            }
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginDTO loginData)
        {
            try
            {
                if (!ModelState.IsValid)
                    return BadRequest(ModelState);

                var user = await _userManager.FindByEmailAsync(loginData.Email);

                if (user == null || !await _userManager.CheckPasswordAsync(user, loginData.Password))
                    return Unauthorized("invalid email or password");

                var claims = new List<Claim>
                {
                    new (ClaimTypes.NameIdentifier, user.Id),
                    new (ClaimTypes.Name, user.UserName!)
                };

                string jwtToken = _tokenService.CreateToken(claims);

                Response.Cookies.Append("access_token", jwtToken, new CookieOptions
                {
                    Expires = DateTime.UtcNow.AddHours(1) 
                });

                return Ok("logged in successfully");
            }
            catch (Exception ex)
            {
                return StatusCode(500, "Internal server error: " + ex.Message);
            }
        }

        [HttpPost("logout")]
        public IActionResult Logout()
        {
            // making our cookie with the name acess_token expires so the browser remove it automatically
            Response.Cookies.Append("access_token", string.Empty, new CookieOptions
            {
                Expires = DateTime.UtcNow.AddDays(-1)
            });

            return Ok("logged out successfully");
        }

    }
}